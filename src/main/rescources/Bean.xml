<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 通过property注入属性 -->
  <!--  <bean id="hello" class="com.atzj.springIocHello">
        <property name="message" value="Hello Dajingjing"/>
    </bean>-->

    <!-- bean作用域 单例 通过setter注入属性在使用时 Spring IoC容器中只会存在一个共享的bean实例 所有对bean的请求 返回同一个实例 -->
    <!-- Singleton是单例类型，就是在创建起容器时就同时自动创建了一个bean的对象，
    不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，Singleton作用域是Spring中的缺省作用域。-->
   <!-- <bean id="hello" class="com.atzj.springIocHello" scope="singleton">

    </bean>-->

    <!-- Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例 -->
    <!--Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象 -->
    <bean id="hello" class="com.atzj.springIoc.Hello" scope="prototype">

    </bean>

</beans>